#+TITLE: March 2017 Articles

* DONE [[https://hackernoon.com/python-sandbox-escape-via-a-memory-corruption-bug-19dde4d5fea5][Escaping a Python sandbox with a memory corruption bug]] :python:security:memory:
  CLOSED: [2017-03-29 Wed 22:47]
  - Author discovered a sandbox'd Python which he found a hole for, reported, got rewarded.
    - Used relatively straightforward Python layer stuff.
  - Looked to Numpy to explot more, as it's C, and might have a memory corruption bug of some kind.
    - Found one that didn't have a CVE, in Github Issues.
  - Unchecked integer overflow, resulting in realloc()
    - A very large array can get allocated, but without sufficient size, leading to unchecked access to memory, e.g. segfault.
  - Python's `id` function leaks memory addresses of underlying PyObject, which is used to easily defat Address-Space Layout Randomization
  - Importing `ctypes`, which gets used a lot, results in mapping 4K of memory in RWX. 
    - "but in theory it should be possible if you have an arbitrary-read exploit primitive. "
  - Eventually crafted an exploit (not an exploit writer)
    - Overflowed the numpy array. 
    - The primitive is used to write the address of system to fwrites GOT/PLT entry.
    - `print` calls `fwrite`, so now `print '/bin/sh'` launches a shell.
  - Lots of core Python modules are wrappers to C.
  - Memory corruption bugs are popular in these modules, and not reported with CVEs, or any responsible security mentions in release notes.
  - "If you want to run untrusted code of any kind, invest the effort in building a secure OS and network architecture to sandbox it."
* DONE [[https://tonyarcieri.com/it-s-time-for-a-memory-safety-intervention][It's time for a memory safety intervention]]           :security:memory:
  CLOSED: [2017-03-29 Wed 00:30]
 
  - Memory safey won't fix:
    - shell escaping bugs
    - logic bugs
    - prevent an attacker who has obtained your HMAC key...
    - prevent your XML-based credentials from accidentally doing something stupid in SAML
  - unsafe code is still unsafe.
  - With C, you're using unsafe memory model 100% of the time.
    - "It's the programming equivalent of trying to walk a tightrope over a lake full of alligators while trying to avoid getting elctrocuted by dangling power lines."
  - "The unfortunate answer is the whole apparatus of modern computing is built on a foundation that is fundamentally unsafe, and when we heap praise on iOS it’s only because it’s slightly less terrible than everything else."
  - We need to collectively admit memory safety is a problem.


* DONE [[https://blog.jessfraz.com/post/containers-zones-jails-vms/][Setting the Record Straight: containers vs. Zones vs. Jails vs. VMs]] :containers:security:jails:zones:
  CLOSED: [2017-03-28 Tue 10:13]
  - Zones, Jails are first class concepts.
  - Containers don't really exist. They are a combination of:
    - namespaces and cgroups, which *are* first class objects.
  - Namespaces are sharable, so... 
    - You can share an X socket. Or, wireshark another container.
  - "Containers come with just the pieces so while the box says to build the Death Star, you are not tied to that."
  - Containers are not a Linux isolation primitive
  - "Containers allow for a flexibility and control that is not possible with Jails, Zones, or VMs. And THAT IS A FEATURE."

* DONE [[https://scholar.harvard.edu/files/mickens/files/thesaddestmoment.pdf][The Saddest Moment]]
  CLOSED: [2017-03-28 Tue 10:07]
James Mickens

** Making distributed systems reliable is inherently impossible
   - Yet, we for whatever reason cling to Byzantine fault tolerance.
** Intuitive arguments about Byzantine fault tolerance, are never intuitive. 
   - Successful intuitive explanation must invoke experiences of real life.
** Even if we're successful at Byzantine fault tolerance, it's still not enough.
   - There will likely still be a human factor, with cables that can be pulled, etc.

* DONE [[https://docs.google.com/document/d/199PqyG3UsyXlwieHaqbGiWVa8eMWi8zzAn0YfcApr8Q/edit#!][My Philosophy on Alerting]]
  CLOSED: [2017-03-25 Sat 01:13]
Rob Ewaschuk

** Pages should be urgent, important, actionable, and real.
   - They should require human intelligence to deal with.
   - ASK:
     - Does it detect something that's imminently user visible?
       "nearly full and getting fuller" and "N+0" zero redundancy counts.
     - Will I ever be able to ignore this rule? Can I refine the rule to make sure I never have to ignore it?
     - Is this going to definitely hurt users?
     - Can I take action on this alert?
     - Will I get paged for something else that will fix this problem?
** Vernacular
   - *page*: anything that tries to urgently get the attention of a specific human
   - *rule*: any kind of logic for detecting some interesting condition in any monitoring system
   - *alert*: a manifestation of that rule that intends to reach a human.
** Symptoms, not causes
   - Availability and correctness
   - Latency
   - Completeness, freshness, durability
   - Features that are important are working correctly. This probably just ties into availability / correctness, I'd think
   - Alert on the data unavailability, not the fact that the database is unreachable.
     - You're going to have to catch the symptom anyway
     - You'll end up with redundant alerts
     - Allegedly inevitable, is not always inevitable.
** Best alerts come from the client perspective.
** Causes can still be useful, but use as context
   - When you discovery a rule that's a cause, check that the symptom is caught as well. Make it so otherwise.
   - Print a terse summary of all of your cause-based rules that are firing in every page you send out.
   - Example:
     #+begin_src
      TooMany500StatusCodes
      Served 10.7% 5xx results in the last 3 minutes!
      Also firing:
          JanitorProcessNotKeepingUp
          UserDatabaseShardDown
          FreshnessIndexBehind    
     #+end_src
** Tickets, reports and emails are sub critical, but should be dealt with daily.
   - Every alert should be tracked through a workflow system. :thinking_pose: 
   - Automatic only works if things can be threaded and rolled up, though... 
** Playbooks
   - If you're playbook gets too long, you're probably spending too much time writing it, and not enough time fixing it.
   - "The best playbooks I've seen have a few notes about exactly what the alert means, and what's currently interesting about an alert"
** Review pages
   - Weekly review of all pages
   - Quarterly stats
   - 10% false positives meric more consideration
   - < 50% accurate alerts are broken
   - AVOID: "I looked, but nothing was wrong", and remove it. Or demote it to something that you can gather statistics on.
** Err on the side of removing noisy alerts – over-monitoring is a harder problem to solve than under-monitoring.
** You should almost always be able to classify the problem into one of: availability & basic functionality; latency; correctness (completeness, freshness and durability of data); and feature-specific problems.

* DONE [[http://peter.bourgon.org/blog/2017/02/21/metrics-tracing-and-logging.html][Metrics Tracing and Logging]]
  CLOSED: [2017-03-24 Fri 16:28]
Peter Bourgon

** Definitions
   - Logging: discrete events. Highest volume
   - Tracing: request scoped
   - Metrics: aggregatable. Lowest volume, given compressibility
*** As a Venn diagram, these three overlap consistently.
    - Logging / Tracing:  Request scoped events
    - Tracing / Metrics:  Request scoped metrics
    - Metrics / Logging:  Aggregable events
    - Metrics / Logging / Tracing: Request scoped, aggregatable events
*** Due to Tracing request scope, not all metrics or logs, for example, can be shoehorned into a tracing system
*** Shoehorning metrics into a logging pipeline may force us to abandon some advantages of a flexible query language to explore them.
    - (Not sure I agree, see splunk. But maybe)
